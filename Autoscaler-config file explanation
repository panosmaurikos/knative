.................................knative_Autoscaler.................................


1)  container-concurrency-target-percentage: "70"
	
   Το ContainerConcurrency προσδιορίζει τον μέγιστο αριθμό αιτημάτων που το container μπορεί να χειριστεί ταυτόχρονα. 
   Από την άλλη, το ContainerConcurrency Target Percentage είναι το ποσοστό του αριθμού αυτού που ο αυτόματος κλιμακωτής 
   προσπαθεί να διατηρήσει σε σταθερή κατάσταση (σε λειτουργία).


   Για παράδειγμα, αν έχουμε ContainerConcurrency ίσο με 10 και ContainerConcurrency Target Percentage ίσο με 70, 
   το ContainerConcurrency Target Percentage καθορίζει ποιο ποσοστό του αριθμού 10 θα πρέπει να χρησιμοποιείται για να 
   καταστεί η λειτουργία λειτουργική.Το 70% του 10, είναι 7, και θα είναι ο στόχος που θέλει να επιτύχει ο αυτόματος κλιμακωτής.
   
_________________________________________________________________________________________________________________________


2)  container-concurrency-target-default: "100"
   
  Το πεδίο ContainerConcurrency Target Default είναι το προεπιλεγμένο ποσοστό που θα προσπαθήσει να διατηρήσει ο αυτόματος 
  κλιμακωτής όταν η συγκεκριμένη λειτουργία (Revision) δεν καθορίζει περιορισμούς για το ContainerConcurrency. 
  Tο ContainerConcurrency Target Default αποτελεί το soft limit που επηρεάζει μόνο τον αριθμό των pods και όχι τον αριθμό
  των αιτημάτων που υποδέχεται ο κάθε pod.

_________________________________________________________________________________________________________________________


3)  requests-per-second-target-default: "200"
    
  Το πεδίο αυτό καθορίζει το προεπιλεγμένο ποσοστό αιτημάτων που θα προσπαθήσει να διατηρήσει ο αυτόματος κλιμακωτής του
  Knative για μια λειτουργία, όταν δεν έχει οριστεί κάποιος περιορισμός για το πόσα αιτήματα ανά δευτερόλεπτο μπορεί να 
  υποστηρίξει η λειτουργία.Αν για μια λειτουργία (Revision) δεν έχει οριστεί κάποιος συγκεκριμένος περιορισμός για το 
  πλήθος των αιτημάτων ανά δευτερόλεπτο, το πεδίο Requests per Second (RPS) Target Default ορίζει πόσα αιτήματα ανά
  δευτερόλεπτο , θα προσπαθήσει να διατηρήσει ο αυτόματος κλιμακωτής.Δηλαδή στο συγκεκριμένο παράδειγμα 200 αιτήματα 
  ανά δευτερόλεπτο για την εν λόγω λειτουργία.
 
_________________________________________________________________________________________________________________________


4)  target-burst-capacity: "211" ( το 211 σημαίνει ότι το σύστημα αναμένεται να αντιμετωπίσει ένα burst έως 211 ταυτόχρονα αιτήματα.)

  Το πεδίο target-burst-capacity καθορίζει το μέγεθος του burst σε ταυτόχρονα αιτήματα που ο διαχειριστής του συστήματος
  αναμένει ότι το σύστημα θα λάβει.Ο αυτόματος κλιμακωτής θα προσπαθήσει να προστατεύσει το σύστημα από την "ουρά"
  προσθέτοντας τον Activator στη διαδρομή αιτημάτων, αν η τρέχουσα διαθέσιμη χωρητικότητα της υπηρεσίας είναι
  μικρότερη από αυτήν την ρύθμιση.Αν αυτή η ρύθμιση είναι 0, τότε ο Activator θα είναι στη διαδρομή των αιτημάτων
  μόνο όταν η revision έχει κλιμακωθεί σε 0.Αν αυτή η ρύθμιση είναι > 0 και το container-concurrency-target-percentage 
  είναι 100% ή 1.0,  τότε ο Activator θα είναι πάντα στη διαδρομή των αιτημάτων.Το -1 δηλώνει απεριόριστη 
  target-burst-capacity και ο Activator θα είναι πάντα στη διαδρομή των αιτημάτων.

  Ο Activator είναι υπεύθυνος για την εισαγωγή ενός buffer για τα αιτήματα που προσεχώς θα εξυπηρετηθούν από το σύστημα. 
  Αυτό συμβαίνει αν το φόρτο αιτημάτων πλησιάζει το "target-burst-capacity", δηλαδή το μέγιστο ποσοστό των αιτημάτων που 
  το σύστημα προσδοκά ότι θα λάβει κατά τη διάρκεια του burst.Στη συνέχεια, το σύστημα θα αντιμετωπίσει 
  τα αιτήματα που βρίσκονται στον buffer, καθιστώντας το σύστημα πιο αποδοτικό και αποφεύγοντας υπερφόρτωση.

_________________________________________________________________________________________________________________________


5) stable-window: "60s"
  
  Το "Stable Window" καθορίζει το χρονικό διάστημα κατά το οποίο ο αυτόματος κλιμακωτής αξιολογεί τον φόρτο αιτημάτων και προσπαθεί να διατηρήσει 
  τον αριθμό των pods σε μια σταθερή κατάσταση.Κατά τη διάρκεια αυτού του παραθύρου, ο κλιμακωτής εκτελεί διάφορους υπολογισμούς για να 
  αποφασίσει εάν πρέπει να αυξήσει ή να μειώσει τον αριθμό των pods, ώστε να διατηρήσει την επιθυμητή επίδοση του συστήματος.
  Σε "σταθερή κατάσταση", εννοούμε ότι το φόρτιο αιτημάτων στο σύστημα είναι σχετικά σταθερό και  δεν υπάρχουν μεγάλα spikes
  ή πτώσεις στον αριθμό των αιτημάτων κατά τη διάρκεια της συγκεκριμένης χρονικής περιόδου.Το "Stable Window" πρέπει να είναι ένα χρονικό 
  διάστημα σε ολόκληρα δευτερόλεπτα. Για παράδειγμα, αν έχουμε "stable-window: 60s", αυτό σημαίνει ότι ο κλιμακωτής θα αξιολογεί το φόρτο
  των αιτημάτων κάθε 60 δευτερόλεπτα και θα προσπαθήσει να διατηρήσει τον αριθμό των pods σταθερό κατά τη διάρκεια αυτής της περιόδου.
   
_________________________________________________________________________________________________________________________


6) panic-window-percentage: "10.0" 

  Η παράμετρος "Panic Window Percentage" καθορίζει το ποσοστό του "Stable Window" που χρησιμοποιείται ως panic window.
  Οταν η μέση συγκριτική τιμή των αιτημάτων κατά τη διάρκεια του "Panic Window Percentage" φτάσει το "Panic Threshold Percentage",
  τότε ο αυτόματος κλιμακωτής εισέρχεται σε κατάσταση πανικού.Η τιμή της παραμέτρου αντιστοιχεί στο 10% του "Stable Window".
  Κατά τη διάρκεια περιόδων πανικού, ο κλιμακωτής θα αξιολογεί το φόρτο των αιτημάτων βασιζόμενος στο 10% του "Stable Window" και θα λαμβάνει μέτρα ανάλογα.

_________________________________________________________________________________________________________________________



7) panic-threshold-percentage: "200.0" 

  Η παράμετρος "Panic Threshold Percentage" καθορίζει το ποσοστό του "container-concurrency-target" (ταυτόχρονων συνδέσεων)
  που, αν φτάσει ή υπερβείται, θα προκαλέσει τον αυτόματο κλιμακωτή να εισέλθει σε πανικό.
  Όταν ο μέσος όρος των ταυτόχρονων συνδέσεων φτάσει το ποσοστό που έχει οριστεί στο "Panic Threshold Percentage", 
  τότε ο κλιμακωτής θα εισέλθει σε κατάσταση πανικού και θα χρησιμοποιήσει το "Panic Window Percentage" για να αξιολογήσει το φόρτο 
  των αιτημάτων και να λάβει κατάλληλα μέτρα.

_________________________________________________________________________________________________________________________


8)  max-scale-up-rate: "1000.0"

  Το πεδίο max-scale-up-rate καθορίζει το ρυθμό με τον οποίο ο αυτόματος κλιμακωτής αυξάνει τον αριθμό των pods.
  Διασφαλίζει δηλαδή ότι ο κλιμακωτής δεν θα αυξήσει τον αριθμό των pods πολύ γρήγορα, προκειμένου να αποτρέψει τυχόν υπερβολική κατανάλωση πόρων.
  Η τιμή (Δεν μπορεί να είναι μικρότερη ή ίση με 1.)"1000.0" υποδεικνύει ότι ο κλιμακωτής μπορεί να αυξήσει τον αριθμό των pods μέχρι 1000 φορές τον τρέχοντα αριθμό.
  Αυτό σημαίνει ότι αν ο αριθμός των pods είναι, για παράδειγμα, 1, ο κλιμακωτής μπορεί να αυξήσει τον αριθμό των pods έως και 1000.	
  Παραδειγμα: Με τιμή 2,0 ο αριθμός των pods μπορεί το πολύ να πάει απο N έως 2N.
	
_________________________________________________________________________________________________________________________      	


9) max-scale-down-rate: "2.0"

 Η παράμετρος "Max Scale Down Rate" καθορίζει το μέγιστο ποσοστό μείωσης του αριθμού των pods κατά την αναπροσαρμογή.
 Η παράμετρος αυτή διασφαλίζει ότι ο κλιμακωτής δεν θα μειώσει τον αριθμό των pods πολύ γρήγορα, προκειμένου να αποτρέψει
 την υπερβολική καταστροφή των pods που μπορεί να επηρεάσει την αποδοτικότητα του συστήματος.

_________________________________________________________________________________________________________________________      


10) enable-scale-to-zero: "true"
   
   Η παράμετρος αυτή ενεργοποιεί τη λειτουργία "Scale to Zero". Όταν είναι ρυθμισμένη σε "true", ο αυτόματος κλιμακωτής μπορεί να μειώσει
   τον αριθμό των pods σε μηδέν όταν η εφαρμογή δεν λαμβάνει καμία κίνηση.

_________________________________________________________________________________________________________________________      


11) scale-to-zero-grace-period: "30s"
	
   Αυτή η παράμετρος καθορίζει το χρονικό διάστημα που ενα ανενεργό "revision" θα παραμείνει εκτελούμενο πριν μειωθεί σε μηδέν pods. 
   Το διάστημα αυτό είναι σημαντικό για να διασφαλιστεί ότι η επαναπρογραμματισμένη δικτύωση έχει ολοκληρωθεί και ο κλιμακωτής θα περιμένει 
   τουλάχιστον το συγκεκριμένο χρονικό διάστημα προτού μειώσει τον αριθμό των pods σε μηδέν.

_________________________________________________________________________________________________________________________      


12) scale-to-zero-pod-retention-period: "0s"

  Αυτή η παράμετρος καθορίζει το ελάχιστο χρονικό διάστημα που θα παραμείνει ο τελευταίος pod ενεργός αφού ο κλιμακωτής έχει αποφασίσει να
  μειώσει τον αριθμό των pods σε μηδέν. Αυτό είναι χρήσιμο όταν το ξεκίνημα των pods είναι πολύ δαπανηρό και ο ρυθμός των αιτημάτων είναι ασταθής. 
  Η τιμή "0s" σημαίνει ότι οι pods θα μειώνονται στο μηδέν αμέσως μόλις δεν λαμβάνονται πλέον αιτήματα.

_________________________________________________________________________________________________________________________      


13) pod-autoscaler-class: "kpa.autoscaling.knative.dev"

  Αυτή η παράμετρος καθορίζει την προεπιλεγμένη class του αυτόματου κλιμακωτή που θα χρησιμοποιηθεί αν δεν καθοριστεί κάποια άλλη.
  Στην περίπτωση που δεν οριστεί καμία άλλη, χρησιμοποιείται ο Knative Pod Autoscaler (KPA) ως προεπιλεγμένος αυτόματος κλιμακωτής.

_________________________________________________________________________________________________________________________      
  
  
14) activator-capacity: "100.0"	

 Η παράμετρος activator-capacity: "100.0" καθορίζει τη χωρητικότητα (capacity) ενός μόνου task του activator στο Knative.
 Ο activator χρησιμοποιείται από το Knative για να ενεργοποιήσει τα pods που εξυπηρετούν τις αιτήσεις που λαμβάνονται. 
 Όταν ένας pod είναι ανενεργός (idle), ο activator αποτελεί τον μεσολαβητή για την ανακίνηση του pod προκειμένου να ανταποκριθεί σε αιτήματα.
 Το activator-capacity καθορίζει πόσα αιτήματα (concurrent requests) μπορεί να εξυπηρετήσει ταυτόχρονα ένα μόνο task του activator. 
 Με άλλα λόγια, αν η τιμή είναι "100.0", τότε ένα μόνο task του activator μπορεί να εξυπηρετήσει 100 αιτήματα ταυτόχρονα.

_________________________________________________________________________________________________________________________ 


15) initial-scale: "1" 
  Η παράμετρος initial-scale καθορίζει την αρχική κλίμακα (αριθμό των pods) ενός "revision" μετά τη δημιουργία του.
  Μπορούμε να καθορίσουμε τον αριθμό των pods που είναι απαιτούμενοι να εκτελούνται αρχικά για το "revision" μετά τη δημιουργία του. 
  Αυτό είναι χρήσιμο για να διασφαλίσουμε ότι η εφαρμογή θα είναι διαθέσιμη αμέσως μετά την δημιουργία της και δεν θα χρειάζεται να περιμένουμε 
  την αυτόματη κλιμάκωση για να εκτελεστεί.
   
_________________________________________________________________________________________________________________________ 


16) allow-zero-initial-scale: "false" 

 Η παράμετρος allow-zero-initial-scale: "false" καθορίζει αν επιτρέπεται η ρύθμιση της αρχικής κλίμακας (initial scale) της "revision" σε μηδέν.
 (initial scale): Όταν δημιουργείτε μια νέα "revision" στο Knative,μπορούμε να ορίσουμε τον αριθμό των pods που θα ξεκινήσουν αμέσως με την ανάπτυξη της "revision".
 Αυτός ο αριθμός των pods είναι η αρχική κλίμακα (initial scale) της "revision".
 Όταν η παράμετρος allow-zero-initial-scale έχει την τιμή "false" (η προκαθορισμένη τιμή), τότε δεν επιτρέπεται η ρύθμιση της αρχικής κλίμακας. 
 Αυτό σημαίνει ότι πρέπει να ορίσουμε έναν αριθμό μεγαλύτερο του μηδενός για την αρχική κλίμακα. 
 Η απόφαση αυτή προστατεύει το σύστημα από το να εκτελεί "revisions" με μηδενικό αριθμό pods, το οποίο μπορεί να οδηγήσει σε μη επιθυμητή συμπεριφορά και δυσλειτουργία.      

_________________________________________________________________________________________________________________________ 
  

17) min-scale: "0" 

 Αυτή η παράμετρος καθορίζει την προεπιλεγμένη ελάχιστη κλίμακα (ελάχιστος αριθμός pods) μιας νέας "revision".
 Αν η τιμή είναι "0", τότε δεν υπάρχει ελάχιστος περιορισμός για τον αριθμό των pods, και η "revision" μπορεί να έχει και μηδέν pods εφόσον δεν λαμβάνονται αιτήματα.

_________________________________________________________________________________________________________________________ 


18) max-scale: "0"

 Αυτή η παράμετρος καθορίζει την προεπιλεγμένη μέγιστη κλίμακα (μέγιστος αριθμός pods) μιας "revision".
 Αν η τιμή είναι "0", τότε δεν υπάρχει ανώτατος περιορισμός για τον αριθμό των pods, και η "revision" μπορεί να κλιμακωθεί όσο χρειάζεται.

_________________________________________________________________________________________________________________________ 


19) scale-down-delay: "0s"

 Όταν η κλίμακας του "revision" χρειάζεται να μειωθεί λόγω χαμηλού φόρτου εργασίας,
 η παράμετρος scale-down-delay καθορίζει τον χρόνο που πρέπει να περιμένει το σύστημα πριν εφαρμόσει την μείωση των pods.
 Αν η τιμή είναι "0s" , τότε η απόφαση να μειωθούν τα pods 
 θα εφαρμοστεί αμέσως όταν το σύστημα ανιχνεύσει τη μείωση του φόρτου.

_________________________________________________________________________________________________________________________ 


20) max-scale-limit: "0"
  
  Η παράμετρος max-scale-limit: "0" καθορίζει το μέγιστο επιτρεπτό όριο για τη μέγιστη κλίμακα (max scale) μιας "revision" στο Knative.
  Όταν η τιμή της παραμέτρου max-scale-limit είναι "0" (η προκαθορισμένη τιμή), τότε δεν υπάρχει κανένα όριο για τη μέγιστη κλίμακα της "revision".
  Αυτό σημαίνει ότι η "revision" μπορεί να κλιμακωθεί σε όσα pods χρειάζεται, χωρίς περιορισμό.
